import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import "./VacancyDetails.css";
import { vacancyService } from "../services/api";
import { getUserRole, isAuthenticated } from "../services/authService";

const VacancyDetails = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  const [vacancy, setVacancy] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showApplyModal, setShowApplyModal] = useState(false);
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [coverLetter, setCoverLetter] = useState("");
  const [applying, setApplying] = useState(false);
  const [applySuccess, setApplySuccess] = useState(false);
  const [applyError, setApplyError] = useState("");
  const [hasApplied, setHasApplied] = useState(false);

  const userRole = getUserRole();
  const isStudent = userRole === "STUDENT";

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞—è–≤–æ–∫
  const APPLICATION_STATUSES = [
    { value: 'APPLIED', label: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', icon: 'üìã', color: 'blue' },
    { value: 'CV_SCREENING', label: '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ', icon: 'üëÄ', color: 'yellow' },
    { value: 'INTERVIEW_SCHEDULED', label: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', icon: 'üìÖ', color: 'indigo' },
    { value: 'INTERVIEW_COMPLETED', label: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ', icon: '‚úì', color: 'purple' },
    { value: 'OFFER_EXTENDED', label: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', icon: 'üì®', color: 'teal' },
    { value: 'ACCEPTED', label: '–ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–∏–Ω—è—Ç', icon: 'üéâ', color: 'green' },
    { value: 'REJECTED', label: '–ö–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω', icon: '‚ùå', color: 'red' },
  ];

  useEffect(() => {
    const fetchVacancy = async () => {
      setLoading(true);
      try {
        const data = await vacancyService.getVacancyById(id);
        if (data.error) throw new Error(data.error);
        setVacancy(data);
        
        if (data.applicationStatus) {
          setHasApplied(true);
        }
      } catch (err) {
        setError(err.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏");
      } finally {
        setLoading(false);
      }
    };

    fetchVacancy();
  }, [id]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π
  const handleBackToList = () => {
    navigate('/vacancies');
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫–ª–∏–∫–∞
  const openApplyModal = () => {
    if (!isAuthenticated()) {
      setShowLoginModal(true);
      return;
    }
    
    if (!isStudent) {
      alert("–¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏");
      return;
    }
    
    setShowApplyModal(true);
  };

  // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const closeLoginModal = () => {
    setShowLoginModal(false);
  };

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const handleRedirectToRegister = () => {
    navigate('/auth/student/register');
    closeLoginModal();
  };

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  const handleRedirectToLogin = () => {
    navigate('/auth/student');
    closeLoginModal();
  };

  // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫–ª–∏–∫–∞
  const closeApplyModal = () => {
    setShowApplyModal(false);
    if (applySuccess) {
      setApplySuccess(false);
      setCoverLetter("");
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
  const handleApply = async () => {
    if (!coverLetter.trim()) {
      setApplyError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ");
      return;
    }

    setApplying(true);
    setApplyError("");
    
    try {
      const result = await vacancyService.applyToVacancy(id, coverLetter);
      
      if (result.error) {
        if (result.error.includes("already applied")) {
          setHasApplied(true);
          setApplyError("–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.");
          
          return;
        }
        throw new Error(result.error);
      }
      
      setApplySuccess(true);
      setHasApplied(true);
      const updatedVacancy = await vacancyService.getVacancyById(id);
      if (!updatedVacancy.error) {
        setVacancy(updatedVacancy);
      }
    } catch (err) {
      setApplyError(err.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é");
    } finally {
      setApplying(false);
    }
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å HTML-—Å—Ç—Ä–æ–∫—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π HTML
  const createMarkup = (htmlString) => {
    return { __html: htmlString };
  };

  // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
  const getCompanyInitial = () => {
    if (!vacancy || !vacancy.companyName) return "?";
    return vacancy.companyName.charAt(0).toUpperCase();
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    if (!dateString) return "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    const date = new Date(dateString);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
    const getMonthName = (month) => {
      const monthNames = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
      ];
      return monthNames[month];
    };
    
    return `${date.getDate()} ${getMonthName(date.getMonth())} ${date.getFullYear()}`;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getStatusText = (status) => {
    const statusObj = APPLICATION_STATUSES.find(s => s.value === status.toUpperCase());
    return statusObj ? statusObj.label : status;
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = (status) => {
    const statusObj = APPLICATION_STATUSES.find(s => s.value === status.toUpperCase());
    return statusObj ? statusObj.icon : '‚ùì';
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å—Ç–∏–ª—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusClass = (status) => {
    const statusObj = APPLICATION_STATUSES.find(s => s.value === status.toUpperCase());
    const color = statusObj ? statusObj.color : 'gray';
    
    return `status-${color}`;
  };

  if (loading) {
    return <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏...</p>;
  }

  if (error) {
    return <p className="error-text">–û—à–∏–±–∫–∞: {error}</p>;
  }

  if (!vacancy) {
    return <p className="not-found-text">–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>;
  }

  return (
    <div className="vacancy-detail">
      <div className="vacancy-header">
        <button className="back-button" onClick={handleBackToList}>–ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º</button>
        
        <h1>{vacancy.title}</h1>
        
        <div className="employer-info">
          <div className="employer-logo">
            {getCompanyInitial()}
          </div>
          <span className="employer-name">{vacancy.companyName || "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</span>
        </div>
        
        {vacancy.work_schedule && (
          <div className="job-tag">{vacancy.work_schedule}</div>
        )}
        {vacancy.experience && (
          <div className="job-tag">{vacancy.experience}</div>
        )}
      </div>
      
      <div className="vacancy-meta">
        <div className="vacancy-info">
          <div className="info-block">
            <span className="info-label">–ó–∞—Ä–ø–ª–∞—Ç–∞</span>
            <span className="salary-value">
              {vacancy.salary_from && vacancy.salary_to
                ? `${vacancy.salary_from} - ${vacancy.salary_to} ${vacancy.salary_currency}`
                : "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"}
            </span>
          </div>
          
          <div className="info-block">
            <span className="info-label">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</span>
            <span className="info-value">{vacancy.experience || "–ù–µ —É–∫–∞–∑–∞–Ω"}</span>
          </div>
          
          <div className="info-block">
            <span className="info-label">–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã</span>
            <span className="info-value">{vacancy.work_schedule || "–ù–µ —É–∫–∞–∑–∞–Ω"}</span>
          </div>
          
          <div className="info-block">
            <span className="info-label">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</span>
            <span className="info-value">{vacancy.location || "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"}</span>
          </div>
          
          <div className="info-block">
            <span className="info-label">–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</span>
            <span className="info-value">
              {formatDate(vacancy.postedDate)}
            </span>
          </div>
        </div>
      </div>
      
      <div className="vacancy-content">

        <div className="description">
          <h3>–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</h3>
          <div dangerouslySetInnerHTML={createMarkup(vacancy.description)} />
        </div>

        {vacancy.skills && vacancy.skills.length > 0 && (
          <div className="skills-section">
            <h3>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏</h3>
            <div className="skills-list">
              {vacancy.skills.map((skill, index) => (
                <div key={index} className="skill-tag">{skill}</div>
              ))}
            </div>
          </div>
        )}
        
      </div>
      
      <div className="vacancy-actions">
        {isStudent && vacancy.applicationStatus ? (
          <div className="already-applied">
            <div className="applied-badge">
              <div className="applied-icon">{getStatusIcon(vacancy.applicationStatus)}</div>
              <span>–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å</span>
            </div>
            <div className="application-status">
              <span className="status-label">–°—Ç–∞—Ç—É—Å:</span>
              <span className={`status-value ${getStatusClass(vacancy.applicationStatus)}`}>
                {getStatusIcon(vacancy.applicationStatus)} {getStatusText(vacancy.applicationStatus)}
              </span>
              {vacancy.applicationDate && (
                <span className="application-date">
                  –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {new Date(vacancy.applicationDate).toLocaleDateString()}
                </span>
              )}
            </div>
          </div>
        ) : (
          <button 
            className="apply-btn" 
            onClick={openApplyModal}
          >
            –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
          </button>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      {showLoginModal && (
        <div className="modal-overlay">
          <div className="apply-modal">
            <div className="modal-header">
              <h3>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
              <button className="close-modal" onClick={closeLoginModal}>√ó</button>
            </div>
            
            <div className="login-required-content">
              <div className="login-icon">üë®‚Äçüíª</div>
              <h4>–î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h4>
              <p>
                –ß—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è 
                –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç.
              </p>
              
              <div className="login-options">
                <button 
                  className="modal-button primary" 
                  onClick={handleRedirectToLogin}
                >
                  –í–æ–π—Ç–∏
                </button>
                <button 
                  className="modal-button secondary register-btn" 
                  onClick={handleRedirectToRegister}
                >
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é */}
      {showApplyModal && (
        <div className="modal-overlay">
          <div className="apply-modal">
            <div className="modal-header">
              <h3>{applySuccess ? "–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" : "–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"}</h3>
              <button className="close-modal" onClick={closeApplyModal}>√ó</button>
            </div>
            
            {applySuccess ? (
              <div className="success-content">
                <div className="success-icon">‚úì</div>
                <p>–í–∞—à –æ—Ç–∫–ª–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é.</p>
                <p>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.</p>
                <button className="modal-button" onClick={closeApplyModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
              </div>
            ) : vacancy.applicationStatus ? (
              <div className="success-content">
                <div className="already-applied-icon">{getStatusIcon(vacancy.applicationStatus)}</div>
                <h4>–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é</h4>
                {vacancy.applicationDate && (
                  <p>–î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞: {new Date(vacancy.applicationDate).toLocaleDateString()}</p>
                )}
                <p>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: 
                  <span className={`status-text ${getStatusClass(vacancy.applicationStatus)}`}>
                    {getStatusIcon(vacancy.applicationStatus)} {getStatusText(vacancy.applicationStatus)}
                  </span>
                </p>
                <button className="modal-button" onClick={closeApplyModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
              </div>
            ) : (
              <>
                <div className="modal-content">
                  <div className="vacancy-title-small">
                    <strong>–í–∞–∫–∞–Ω—Å–∏—è:</strong> {vacancy.title}
                    {vacancy.companyName && (
                      <div className="vacancy-company-small">
                        <strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> {vacancy.companyName}
                      </div>
                    )}
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="coverLetter">–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ</label>
                    <textarea
                      id="coverLetter"
                      value={coverLetter}
                      onChange={(e) => setCoverLetter(e.target.value)}
                      placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ –ø–æ—á–µ–º—É –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é..."
                      rows="6"
                    />
                    {applyError && <div className="error-message">{applyError}</div>}
                  </div>
                </div>
                
                <div className="modal-footer">
                  <button 
                    className="modal-button secondary" 
                    onClick={closeApplyModal}
                    disabled={applying}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button 
                    className="modal-button primary" 
                    onClick={handleApply}
                    disabled={applying}
                  >
                    {applying ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫"}
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default VacancyDetails; 