import React, { useState, useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import "./VacancyDisplay.css";
import { API_ENDPOINTS, apiClient, handleApiError, vacancyService } from '../services/api';
import FilterSection from './FilterSection';
import { getUserRole, isAuthenticated } from "../services/authService";

function VacancyDisplay({ searchFilters, searchQuery, onFiltersChange }) {
  const navigate = useNavigate();
  const [vacancies, setVacancies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [locationOptions, setLocationOptions] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [windowWidth, setWindowWidth] = useState(window.innerWidth);
  const [totalCount, setTotalCount] = useState(0);
  const vacanciesPerPage = 5;
  const [cache, setCache] = useState({});
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏ –æ—Ç–∫–ª–∏–∫–æ–≤
  const [showApplyModal, setShowApplyModal] = useState(false);
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [coverLetter, setCoverLetter] = useState("");
  const [applying, setApplying] = useState(false);
  const [applySuccess, setApplySuccess] = useState(false);
  const [applyError, setApplyError] = useState("");
  const [selectedVacancy, setSelectedVacancy] = useState(null);

  const userRole = getUserRole();
  const isStudent = userRole === "STUDENT";

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞—è–≤–æ–∫
  const APPLICATION_STATUSES = [
    { value: 'APPLIED', label: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞', icon: 'üìã', color: 'blue' },
    { value: 'CV_SCREENING', label: '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ', icon: 'üëÄ', color: 'yellow' },
    { value: 'INTERVIEW_SCHEDULED', label: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ', icon: 'üìÖ', color: 'indigo' },
    { value: 'INTERVIEW_COMPLETED', label: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ', icon: '‚úì', color: 'purple' },
    { value: 'OFFER_EXTENDED', label: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', icon: 'üì®', color: 'teal' },
    { value: 'ACCEPTED', label: '–ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–∏–Ω—è—Ç', icon: 'üéâ', color: 'green' },
    { value: 'REJECTED', label: '–ö–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω', icon: '‚ùå', color: 'red' },
  ];

  useEffect(() => {
    const handleResize = () => {
      setWindowWidth(window.innerWidth);
    };
    
    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  useEffect(() => {
    fetchVacancies();
  }, [currentPage]);

  useEffect(() => {
    // –í—ã–∑—ã–≤–∞–µ–º handleSearch –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ searchQuery, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    handleSearch(searchFilters);
  }, [searchQuery]);

  useEffect(() => {
    fetchRegions();
  }, []);

  const fetchVacancies = async () => {
    setLoading(true);
    try {
      if (cache[currentPage]) {
        setVacancies(cache[currentPage]);
        setLoading(false);
        const totalP = Math.ceil(totalCount / vacanciesPerPage);
        if (currentPage < totalP && !cache[currentPage + 1]) {
          apiClient.get(`${API_ENDPOINTS.VACANCIES.GET_ALL}?page=${currentPage + 1}&size=${vacanciesPerPage}`)
            .then(res => setCache(prev => ({ ...prev, [currentPage + 1]: res.data.vacancies })))
            .catch(() => {});
        }
        return;
      }
      const response = await apiClient.get(`${API_ENDPOINTS.VACANCIES.GET_ALL}?page=${currentPage}&size=${vacanciesPerPage}`);
      const data = response.data;
      
      setVacancies(data.vacancies || []);
      setTotalCount(data.totalCount || 0);
      setCache(prev => ({ ...prev, [currentPage]: data.vacancies }));
      const totalP = Math.ceil((data.totalCount || 0) / vacanciesPerPage);
      if (currentPage < totalP) {
        apiClient.get(`${API_ENDPOINTS.VACANCIES.GET_ALL}?page=${currentPage + 1}&size=${vacanciesPerPage}`)
          .then(res => setCache(prev => ({ ...prev, [currentPage + 1]: res.data.vacancies })))
          .catch(() => {});
      }
    } catch (err) {
      setError(err.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π");
    } finally {
      setLoading(false);
    }
  };

  const fetchRegions = async () => {
    try {
      const regions = await vacancyService.getRegions();
      const options = regions.map(region => ({ value: region, label: region }));
      setLocationOptions(options);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤:", err);
      setLocationOptions([]);
    }
  };

  const handleSearch = useCallback(async (filters) => {
    setLoading(true);
    try {
      const updatedFilters = {
        ...searchFilters,
        keywords: filters.keywords,
        ml_skills: filters.mlSkills,
        experience: filters.experience,
        locations: filters.locations,
        keywordsInTitle: filters.keywordFilter?.title,
        keywordsInCompany: filters.keywordFilter?.company,
        keywordsInDescription: filters.keywordFilter?.description
      };
      
      onFiltersChange(updatedFilters);

      const hasKeywords = filters.keywords?.trim() !== "";
      const hasKeywordFilter = filters.keywordFilter?.title || 
                              filters.keywordFilter?.company || 
                              filters.keywordFilter?.description;

      if (hasKeywords && !hasKeywordFilter) {
        setVacancies([]);
        setTotalCount(0);
        setLoading(false);
        return;
      }

      const hasActiveFilters = 
        filters.keywords?.trim() ||
        (filters.locations && filters.locations.length > 0) ||
        filters.experience?.trim() ||
        filters.mlSkills?.trim() ||
        searchFilters.salary ||
        searchFilters.schedule ||
        (searchQuery && searchQuery.trim() !== "");

      let data;
      if (hasActiveFilters) {
        const searchParams = {
          keywords: filters.keywords?.trim() || undefined,
          region: filters.locations && filters.locations.length ? filters.locations.join(",") : undefined,
          experience: filters.experience?.trim() || undefined,
          salary_from: searchFilters.salary || undefined,
          schedule: searchFilters.schedule || undefined,
          ml_skills: filters.mlSkills?.trim() || undefined,
          query: searchQuery || undefined,
          page: currentPage,
          size: vacanciesPerPage
        };

        Object.keys(searchParams).forEach(key => {
          if (
            searchParams[key] === undefined || 
            searchParams[key] === "" || 
            (Array.isArray(searchParams[key]) && searchParams[key].length === 0)
          ) {
            delete searchParams[key];
          }
        });

        console.log("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", searchParams);

        if (Object.keys(searchParams).length > 0) {
          const response = await apiClient.get(`${API_ENDPOINTS.VACANCIES.SEARCH}?${new URLSearchParams(searchParams)}`);
          data = response.data;
        } else {
          const response = await apiClient.get(`${API_ENDPOINTS.VACANCIES.GET_ALL}?page=${currentPage}&size=${vacanciesPerPage}`);
          data = response.data;
        }
      } else {
        const response = await apiClient.get(`${API_ENDPOINTS.VACANCIES.GET_ALL}?page=${currentPage}&size=${vacanciesPerPage}`);
        data = response.data;
      }
      
      setVacancies(data.vacancies || []);
      setTotalCount(data.totalCount || 0);

      if (hasKeywords && hasKeywordFilter) {
        const keywords = filters.keywords.toLowerCase().trim();
        console.log("–ü—Ä–∏–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏:", data.vacancies[0]);
        const filteredData = (data.vacancies || []).filter(vacancy => {
          const matchesTitle = filters.keywordFilter?.title && 
                             vacancy.title?.toLowerCase().includes(keywords);
          const matchesCompany = filters.keywordFilter?.company && 
                               vacancy.company_name?.toLowerCase().includes(keywords);
          const matchesDescription = filters.keywordFilter?.description && 
                                   ((vacancy.requirements?.toLowerCase() || '').includes(keywords) ||
                                    (vacancy.description?.toLowerCase() || '').includes(keywords));
          
          return matchesTitle || matchesCompany || matchesDescription;
        });
        
        setVacancies(filteredData);
        setTotalCount(filteredData.length);
      }
      
      if (searchQuery !== undefined) {
        if (searchQuery.trim() !== "") {
          const query = searchQuery.toLowerCase().trim();
          const filteredData = (data.vacancies || []).filter(vacancy => 
            vacancy.title?.toLowerCase().includes(query) || 
            vacancy.company_name?.toLowerCase().includes(query) || 
            vacancy.description?.toLowerCase().includes(query) || 
            vacancy.requirements?.toLowerCase().includes(query)
          );
          
          setVacancies(filteredData);
          setTotalCount(filteredData.length);
        }
      }

      setCurrentPage(1);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:", err);
      setError(err.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π");
    } finally {
      setLoading(false);
    }
  }, [searchFilters, searchQuery, onFiltersChange, currentPage, vacanciesPerPage]);

  const getMatchClass = (percentage) => {
    if (percentage >= 75) return 'high';
    if (percentage >= 40) return 'medium';
    return 'low';
  };

  const getMatchText = (percentage) => {
    if (percentage >= 75) return '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ';
    if (percentage >= 40) return '–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ';
    return '–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ';
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const currentVacancies = vacancies;

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ totalCount —Å —Å–µ—Ä–≤–µ—Ä–∞
  const totalPages = Math.ceil(totalCount / vacanciesPerPage);
  const pagesToShow = 10;
  const startPage = Math.max(1, currentPage - Math.floor(pagesToShow / 2));
  const endPage = Math.min(totalPages, startPage + pagesToShow - 1);
  
  const goToPage = (page) => {
    if (page >= 1 && page <= totalPages) setCurrentPage(page);
  };

  const handleVacancyClick = (vacancyId) => {
    navigate(`/vacancies/${vacancyId}`);
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
  const openApplyModal = (vacancy, e) => {
    if (e) {
      e.stopPropagation();
    }
    
    if (!isAuthenticated()) {
      setShowLoginModal(true);
      setSelectedVacancy(vacancy);
      return;
    }
    
    if (!isStudent) {
      alert("–¢–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏");
      return;
    }
    
    if (vacancy.applied) {
      alert("–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é");
      return;
    }
    
    setSelectedVacancy(vacancy);
    setShowApplyModal(true);
  };

  // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const closeLoginModal = () => {
    setShowLoginModal(false);
    setSelectedVacancy(null);
  };

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const handleRedirectToRegister = () => {
    navigate('/auth/student/register');
    closeLoginModal();
  };

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  const handleRedirectToLogin = () => {
    navigate('/auth/student');
    closeLoginModal();
  };

  // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫–ª–∏–∫–∞
  const closeApplyModal = () => {
    setShowApplyModal(false);
    setSelectedVacancy(null);
    if (applySuccess) {
      setApplySuccess(false);
      setCoverLetter("");
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
  const handleApply = async () => {
    if (!coverLetter.trim()) {
      setApplyError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ");
      return;
    }

    setApplying(true);
    setApplyError("");
    
    try {
      const result = await vacancyService.applyToVacancy(selectedVacancy.id, coverLetter);
      
      if (result.error) {
        if (result.error.includes("already applied")) {
          setApplyError("–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é.");
          return;
        }
        throw new Error(result.error);
      }
      
      setApplySuccess(true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      const updatedVacancies = vacancies.map(v => {
        if (v.id === selectedVacancy.id) {
          return { ...v, applied: true };
        }
        return v;
      });
      setVacancies(updatedVacancies);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      if (cache[currentPage]) {
        setCache({
          ...cache,
          [currentPage]: cache[currentPage].map(v => {
            if (v.id === selectedVacancy.id) {
              return { ...v, applied: true };
            }
            return v;
          })
        });
      }
    } catch (err) {
      setApplyError(err.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é");
    } finally {
      setApplying(false);
    }
  };

  return (
    <div className="vacancy-display">
      <FilterSection
        initialKeywords={searchFilters.keywords || ""}
        initialMlSkills={searchFilters.ml_skills || ""}
        initialExperience={searchFilters.experience || ""}
        initialSelectedLocations={searchFilters.locations || []}
        initialKeywordFilter={{
          title: searchFilters.keywordsInTitle || false,
          company: searchFilters.keywordsInCompany || false,
          description: searchFilters.keywordsInDescription || false
        }}
        locationOptions={locationOptions}
        onSearch={handleSearch}
      />

      <div className="vacancies-list">
        {loading ? (
          <p id="loadingErr">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        ) : error ? (
          <p id="resultErr">–û—à–∏–±–∫–∞: {error}</p>
        ) : currentVacancies.length === 0 ? (
          <p id="resultErr">–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
        ) : (
          currentVacancies.map((vacancy) => (
            <div key={vacancy.id} className="vacancy-card" onClick={() => handleVacancyClick(vacancy.id)}>
              {searchFilters.ml_skills && vacancy.match_percentage !== undefined && (
                <div className="match-indicator">
                <div className={`match-circle ${getMatchClass(vacancy.match_percentage)}`}>
                  {vacancy.match_percentage}%
                  </div>
                  <span className={`match-text ${getMatchClass(vacancy.match_percentage)}`}>
                    {getMatchText(vacancy.match_percentage)}
                  </span>
                </div>
              )}
              <h2>{vacancy.title}</h2>
              
              <div className="vacancy-details">
                <p className="salary">
                  {vacancy.salary_from && vacancy.salary_to
                  ? `${vacancy.salary_from} - ${vacancy.salary_to} ${vacancy.salary_currency}`
                  : "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
              </p>
                
                <div className="vacancy-meta-info">
                  {vacancy.location && (
                    <p className="location">{vacancy.location}</p>
                  )}
                  
                  {vacancy.work_schedule && (
                    <p className="schedule">{vacancy.work_schedule}</p>
                  )}
                  
                  {vacancy.experience && (
                    <div className="experience">{vacancy.experience}</div>
                  )}
                </div>
              </div>
              
              {searchFilters.ml_skills && vacancy.matching_skills && vacancy.missing_skills && (
                <div className="skills-match-container">
                  <div className="match-info">
                    <div className="match-score">
                      <div className="match-label">–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–æ–≤</div>
                      <div className="match-value">{vacancy.skills_matched} –∏–∑ {vacancy.total_skills_required}</div>
                    </div>
                    <div className="similarity-score">
                      <div className="similarity-label">–ò–Ω–¥–µ–∫—Å —Å—Ö–æ–∂–µ—Å—Ç–∏</div>
                      <div className="similarity-value">{(vacancy.similarity_score * 100).toFixed(1)}%</div>
                    </div>
                  </div>
                  
                  <div className="skills-lists">
                    {vacancy.matching_skills.length > 0 && (
                      <div className="matching-skills">
                        <div className="skills-title">–°–æ–≤–ø–∞–¥–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏:</div>
                        <div className="skills-tags">
                          {vacancy.matching_skills.map((skill, index) => (
                            <div key={index} className="skill-tag matching">{skill}</div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {vacancy.missing_skills.length > 0 && (
                      <div className="missing-skills">
                        <div className="skills-title">–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞–≤—ã–∫–∏:</div>
                        <div className="skills-tags">
                          {vacancy.missing_skills.map((skill, index) => (
                            <div key={index} className="skill-tag missing">{skill}</div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              {vacancy.skills && vacancy.skills.length > 0 && !searchFilters.ml_skills && (
                <div className="vacancy-skills">
                  {vacancy.skills.slice(0, 3).map((skill, index) => (
                    <div key={index} className="vacancy-skill-tag">{skill}</div>
                  ))}
                  {vacancy.skills.length > 3 && (
                    <div className="vacancy-skill-more">+{vacancy.skills.length - 3}</div>
                  )}
                </div>
              )}
              
              <div className="vacancy-actions">
                {isStudent && vacancy.applied ? (
                  <div className="already-applied-badge">
                    <span className="applied-icon">‚úì</span>
                    <span>–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å</span>
                  </div>
                ) : (
                  <button 
                    className="apply-btn"
                    onClick={(e) => openApplyModal(vacancy, e)}
                  >
                    –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                  </button>
                )}
                <button 
                  className="contact-btn" 
                  onClick={(e) => {
                    e.stopPropagation();
                    handleVacancyClick(vacancy.id);
                  }}
                >
                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
              </div>
            </div>
          ))
        )}
      </div>

      <div className="pagination-container">
        <div className="pagination">
          <button className="pagination-btn" onClick={() => goToPage(currentPage - 1)} disabled={currentPage === 1}>
            &lt;
          </button>

          {startPage > 1 && (
            <>
              <button className="pagination-btn" onClick={() => goToPage(1)}>
                1
              </button>
              {startPage > 2 && <span className="dots">...</span>}
            </>
          )}

          {Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i).map((page) => {
            const isMobileHidden = (
              windowWidth <= 480 && 
              page !== currentPage && 
              page !== startPage && 
              page !== endPage && 
              page !== 1 && 
              page !== totalPages &&
              Math.abs(page - currentPage) > 1
            );
            
            return (
              <button 
                key={page} 
                onClick={() => goToPage(page)} 
                className={`pagination-btn ${currentPage === page ? "active" : ""} ${isMobileHidden ? "mobile-hide" : ""}`}
              >
              {page}
            </button>
            );
          })}

          {endPage < totalPages && (
            <>
              {endPage < totalPages - 1 && <span className="dots">...</span>}
              <button className="pagination-btn" onClick={() => goToPage(totalPages)}>
                {totalPages}
              </button>
            </>
          )}

          <button className="pagination-btn" onClick={() => goToPage(currentPage + 1)} disabled={currentPage === totalPages}>
            &gt;
          </button>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      {showLoginModal && (
        <div className="modal-overlay">
          <div className="apply-modal">
            <div className="modal-header">
              <h3>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
              <button className="close-modal" onClick={closeLoginModal}>√ó</button>
            </div>
            
            <div className="login-required-content">
              <div className="login-icon">üë®‚Äçüíª</div>
              <h4>–î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h4>
              <p>
                –ß—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è 
                –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç.
              </p>
              
              <div className="login-options">
                <button 
                  className="modal-button primary" 
                  onClick={handleRedirectToLogin}
                >
                  –í–æ–π—Ç–∏
                </button>
                <button 
                  className="modal-button secondary register-btn" 
                  onClick={handleRedirectToRegister}
                >
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é */}
      {showApplyModal && selectedVacancy && (
        <div className="modal-overlay">
          <div className="apply-modal">
            <div className="modal-header">
              <h3>{applySuccess ? "–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" : "–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"}</h3>
              <button className="close-modal" onClick={closeApplyModal}>√ó</button>
            </div>
            
            {applySuccess ? (
              <div className="success-content">
                <div className="success-icon">‚úì</div>
                <p>–í–∞—à –æ—Ç–∫–ª–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é.</p>
                <p>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.</p>
                <button className="modal-button" onClick={closeApplyModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
              </div>
            ) : (
              <>
                <div className="modal-content">
                  <div className="vacancy-title-small">
                    <strong>–í–∞–∫–∞–Ω—Å–∏—è:</strong> {selectedVacancy.title}
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="coverLetter">–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ</label>
                    <textarea
                      id="coverLetter"
                      value={coverLetter}
                      onChange={(e) => setCoverLetter(e.target.value)}
                      placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ –ø–æ—á–µ–º—É –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é..."
                      rows="6"
                    />
                    {applyError && <div className="error-message">{applyError}</div>}
                  </div>
                </div>
                
                <div className="modal-footer">
                  <button 
                    className="modal-button secondary" 
                    onClick={closeApplyModal}
                    disabled={applying}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button 
                    className="modal-button primary" 
                    onClick={handleApply}
                    disabled={applying}
                  >
                    {applying ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫"}
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

export default VacancyDisplay;